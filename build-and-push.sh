#!/bin/bash

# Script para build e push da imagem Docker do NeoSale CRM
# Versiona automaticamente a aplica√ß√£o e a imagem Docker

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
IMAGE_NAME="neosale-crm"
DOCKER_USERNAME="brunobspaiva"  # Substitua pelo seu usu√°rio do Docker Hub

# Fun√ß√£o para incrementar vers√£o
increment_version() {
    local version=$1
    local type=$2
    
    IFS='.' read -ra ADDR <<< "$version"
    major=${ADDR[0]}
    minor=${ADDR[1]}
    patch=${ADDR[2]}
    
    case $type in
        "major")
            major=$((major + 1))
            minor=0
            patch=0
            ;;
        "minor")
            minor=$((minor + 1))
            patch=0
            ;;
        "patch")
            patch=$((patch + 1))
            ;;
    esac
    
    echo "$major.$minor.$patch"
}

# Verificar se deve incrementar vers√£o
echo -e "${BLUE}üöÄ NeoSale CRM - Build & Deploy Autom√°tico${NC}"
echo -e "${YELLOW}üîÑ Como deseja incrementar a vers√£o?${NC}"
echo "1) Patch (0.1.0 -> 0.1.1) - Corre√ß√µes de bugs e pequenos ajustes"
echo "2) Minor (0.1.0 -> 0.2.0) - Novas funcionalidades"
echo "3) Major (0.1.0 -> 1.0.0) - Mudan√ßas que quebram compatibilidade"
echo "4) Manter vers√£o atual"
echo "5) Vers√£o autom√°tica (detecta tipo baseado nas mudan√ßas)"
read -p "Escolha uma op√ß√£o (1-5): " choice

# Extrair vers√£o atual do package.json
if [ -f "package.json" ]; then
    CURRENT_VERSION=$(grep '"version"' package.json | sed 's/.*"version": "\(.*\)".*/\1/')
    echo -e "${GREEN}üìã Vers√£o atual: $CURRENT_VERSION${NC}"
else
    echo -e "${RED}‚ùå Arquivo package.json n√£o encontrado${NC}"
    exit 1
fi

# Fun√ß√£o para detectar tipo de vers√£o automaticamente
detect_version_type() {
    # Verificar se h√° mudan√ßas staged
    if ! git diff --cached --quiet; then
        # Verificar tipos de mudan√ßas
        has_breaking=$(git diff --cached | grep -i -E "(breaking|major|incompatible)" | wc -l)
        has_feat=$(git diff --cached | grep -i -E "(feat|feature|add|new)" | wc -l)
        has_fix=$(git diff --cached | grep -i -E "(fix|bug|error|issue|problem|correct)" | wc -l)
        
        if [ $has_breaking -gt 0 ]; then
            echo "major"
        elif [ $has_feat -gt 0 ]; then
            echo "minor"
        else
            echo "patch"
        fi
    else
        echo "patch"
    fi
}

# Processar escolha do usu√°rio
case $choice in
    1)
        NEW_VERSION=$(increment_version $CURRENT_VERSION "patch")
        echo -e "${GREEN}üìà Incrementando vers√£o PATCH: $CURRENT_VERSION -> $NEW_VERSION${NC}"
        ;;
    2)
        NEW_VERSION=$(increment_version $CURRENT_VERSION "minor")
        echo -e "${GREEN}üìà Incrementando vers√£o MINOR: $CURRENT_VERSION -> $NEW_VERSION${NC}"
        ;;
    3)
        NEW_VERSION=$(increment_version $CURRENT_VERSION "major")
        echo -e "${GREEN}üìà Incrementando vers√£o MAJOR: $CURRENT_VERSION -> $NEW_VERSION${NC}"
        ;;
    4)
        NEW_VERSION=$CURRENT_VERSION
        echo -e "${YELLOW}üìã Mantendo vers√£o atual: $NEW_VERSION${NC}"
        ;;
    5)
        AUTO_TYPE=$(detect_version_type)
        NEW_VERSION=$(increment_version $CURRENT_VERSION $AUTO_TYPE)
        echo -e "${GREEN}ü§ñ Vers√£o autom√°tica detectada ($AUTO_TYPE): $CURRENT_VERSION -> $NEW_VERSION${NC}"
        ;;
    *)
        echo -e "${RED}‚ùå Op√ß√£o inv√°lida. Usando vers√£o autom√°tica.${NC}"
        AUTO_TYPE=$(detect_version_type)
        NEW_VERSION=$(increment_version $CURRENT_VERSION $AUTO_TYPE)
        echo -e "${GREEN}ü§ñ Vers√£o autom√°tica ($AUTO_TYPE): $CURRENT_VERSION -> $NEW_VERSION${NC}"
        ;;
esac

# Atualizar package.json se a vers√£o mudou
if [ "$NEW_VERSION" != "$CURRENT_VERSION" ]; then
    echo -e "${YELLOW}üìù Atualizando package.json para vers√£o $NEW_VERSION...${NC}"
    
    # Backup do package.json
    cp package.json package.json.backup
    
    # Atualizar vers√£o no package.json
    if sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/g" package.json; then
        # Verificar se a atualiza√ß√£o foi bem-sucedida
        UPDATED_VERSION=$(grep '"version"' package.json | sed 's/.*"version": "\(.*\)".*/\1/')
        if [ "$UPDATED_VERSION" = "$NEW_VERSION" ]; then
            echo -e "${GREEN}‚úÖ Vers√£o atualizada no package.json: $CURRENT_VERSION -> $NEW_VERSION${NC}"
            rm package.json.backup
        else
            echo -e "${RED}‚ùå Erro ao atualizar vers√£o no package.json${NC}"
            mv package.json.backup package.json
            exit 1
        fi
    else
        echo -e "${RED}‚ùå Erro ao executar sed no package.json${NC}"
        mv package.json.backup package.json
        exit 1
    fi
    
    # Fazer commit das mudan√ßas
    echo -e "${YELLOW}üìù Fazendo commit das mudan√ßas...${NC}"
    
    # Gerar descri√ß√£o autom√°tica baseada nas altera√ß√µes
    git add .
    
    # Detectar tipos de altera√ß√µes
    added_files=$(git diff --cached --name-status | grep "^A" | wc -l)
    modified_files=$(git diff --cached --name-status | grep "^M" | wc -l)
    deleted_files=$(git diff --cached --name-status | grep "^D" | wc -l)
    
    # Detectar altera√ß√µes em arquivos espec√≠ficos
    has_src_changes=$(git diff --cached --name-only | grep "^src/" | wc -l)
    has_test_changes=$(git diff --cached --name-only | grep -E "(test|spec)" | wc -l)
    has_doc_changes=$(git diff --cached --name-only | grep -E "\.(md|txt|rst)$" | wc -l)
    has_config_changes=$(git diff --cached --name-only | grep -E "\.(json|yml|yaml|env)$" | wc -l)
    has_docker_changes=$(git diff --cached --name-only | grep -E "(Dockerfile|docker-compose|build-and-push)" | wc -l)
    has_style_changes=$(git diff --cached --name-only | grep -E "\.(css|scss|less|style)" | wc -l)
    
    # Detectar se h√° mudan√ßas no package.json (vers√£o)
    has_version_change=$(git diff --cached --name-only | grep "package.json" | wc -l)
    
    # Determinar tipo de commit sem√¢ntico
    commit_type="chore"
    
    # Prioridade: feat > fix > docs > style > refactor > test > chore
    if [ $added_files -gt 0 ] && [ $has_src_changes -gt 0 ]; then
        commit_type="feat"
    elif [ $has_src_changes -gt 0 ] && [ $modified_files -gt 0 ]; then
        # Verificar se √© corre√ß√£o (palavras-chave em arquivos modificados)
        fix_keywords=$(git diff --cached | grep -i -E "(fix|bug|error|issue|problem|correct)" | wc -l)
        if [ $fix_keywords -gt 0 ]; then
            commit_type="fix"
        else
            commit_type="feat"
        fi
    elif [ $has_doc_changes -gt 0 ]; then
        commit_type="docs"
    elif [ $has_style_changes -gt 0 ]; then
        commit_type="style"
    elif [ $has_test_changes -gt 0 ]; then
        commit_type="test"
    elif [ $has_config_changes -gt 0 ] || [ $has_docker_changes -gt 0 ]; then
        commit_type="chore"
    fi
    
    # Gerar descri√ß√£o baseada nas altera√ß√µes
    commit_description=""
    
    if [ $has_src_changes -gt 0 ]; then
        if [ "$commit_type" = "feat" ]; then
            commit_description="${commit_description}novas funcionalidades, "
        elif [ "$commit_type" = "fix" ]; then
            commit_description="${commit_description}corre√ß√µes de bugs, "
        else
            commit_description="${commit_description}atualiza√ß√µes no c√≥digo, "
        fi
    fi
    
    if [ $has_docker_changes -gt 0 ]; then
        commit_description="${commit_description}melhorias no Docker/deploy, "
    fi
    
    if [ $has_config_changes -gt 0 ]; then
        commit_description="${commit_description}ajustes de configura√ß√£o, "
    fi
    
    if [ $has_doc_changes -gt 0 ]; then
        commit_description="${commit_description}atualiza√ß√µes na documenta√ß√£o, "
    fi
    
    if [ $has_test_changes -gt 0 ]; then
        commit_description="${commit_description}atualiza√ß√µes nos testes, "
    fi
    
    if [ $has_style_changes -gt 0 ]; then
        commit_description="${commit_description}ajustes de estilo, "
    fi
    
    if [ $added_files -gt 0 ]; then
        commit_description="${commit_description}${added_files} arquivo(s) adicionado(s), "
    fi
    
    if [ $modified_files -gt 0 ]; then
        commit_description="${commit_description}${modified_files} arquivo(s) modificado(s), "
    fi
    
    if [ $deleted_files -gt 0 ]; then
        commit_description="${commit_description}${deleted_files} arquivo(s) removido(s), "
    fi
    
    # Remover v√≠rgula final e definir descri√ß√£o padr√£o se vazia
    commit_description=$(echo "$commit_description" | sed 's/, $//')
    
    if [ -z "$commit_description" ]; then
        commit_description="atualiza√ß√£o de vers√£o e melhorias gerais"
    fi
    
    echo -e "${GREEN}üìã Tipo de commit: $commit_type${NC}"
    echo -e "${GREEN}üìã Descri√ß√£o gerada: $commit_description${NC}"
    
    git commit -m "$commit_type: bump version to $NEW_VERSION - $commit_description"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Commit realizado com sucesso${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Nenhuma mudan√ßa para commit ou erro no commit${NC}"
    fi
fi

VERSION=$NEW_VERSION
echo -e "${GREEN}üöÄ Usando vers√£o: $VERSION${NC}"
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo -e "${GREEN}üê≥ Iniciando build da imagem Docker do NeoSale CRM${NC}"

# Verificar se o Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker n√£o est√° rodando. Por favor, inicie o Docker e tente novamente.${NC}"
    exit 1
fi

# Build da imagem
echo -e "${YELLOW}üì¶ Fazendo build da imagem...${NC}"
docker build -t $IMAGE_NAME:$VERSION .

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Build conclu√≠do com sucesso!${NC}"
else
    echo -e "${RED}‚ùå Erro no build da imagem${NC}"
    exit 1
fi

# Criar tags para o Docker Hub
echo -e "${YELLOW}üè∑Ô∏è  Criando tags para o Docker Hub...${NC}"
docker tag $IMAGE_NAME:$VERSION $DOCKER_USERNAME/$IMAGE_NAME:$VERSION
docker tag $IMAGE_NAME:$VERSION $DOCKER_USERNAME/$IMAGE_NAME:latest

echo -e "${GREEN}‚úÖ Tags criadas: $VERSION e latest${NC}"

# Login no Docker Hub (opcional - descomente se necess√°rio)
# echo -e "${YELLOW}üîê Fazendo login no Docker Hub...${NC}"
# docker login

# Push para o Docker Hub
echo -e "${YELLOW}üì§ Enviando imagem versionada para o Docker Hub...${NC}"
docker push $DOCKER_USERNAME/$IMAGE_NAME:$VERSION

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Vers√£o $VERSION enviada com sucesso!${NC}"
else
    echo -e "${RED}‚ùå Erro ao enviar vers√£o $VERSION${NC}"
    exit 1
fi

echo -e "${YELLOW}üì§ Enviando tag latest para o Docker Hub...${NC}"
docker push $DOCKER_USERNAME/$IMAGE_NAME:latest

if [ $? -eq 0 ]; then
    echo -e "${GREEN}üéâ Imagens enviadas com sucesso para o Docker Hub!${NC}"
    echo -e "${GREEN}üìã Vers√µes dispon√≠veis:${NC}"
    echo -e "${GREEN}   - $DOCKER_USERNAME/$IMAGE_NAME:$VERSION${NC}"
    echo -e "${GREEN}   - $DOCKER_USERNAME/$IMAGE_NAME:latest${NC}"
    echo -e "${GREEN}üöÄ Para executar: docker run -p 3000:3000 $DOCKER_USERNAME/$IMAGE_NAME:$VERSION${NC}"
    
    # Criar tag git para a vers√£o
    echo -e "${YELLOW}üè∑Ô∏è  Criando tag git para vers√£o $VERSION...${NC}"
    git tag -a "v$VERSION" -m "Release version $VERSION"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Tag git v$VERSION criada com sucesso${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Erro ao criar tag git ou tag j√° existe${NC}"
    fi
    
    # Deploy autom√°tico no EasyPanel
    echo -e "${YELLOW}üöÄ Iniciando deploy autom√°tico no EasyPanel...${NC}"
    
    # Configura√ß√µes do EasyPanel (ajuste conforme necess√°rio)
    EASYPANEL_URL="https://evolution-api-neosale-crm.mrzt3w.easypanel.host"
    EASYPANEL_PROJECT="neosale-crm"
    EASYPANEL_TOKEN="seu_token_aqui"  # Token fixo no c√≥digo
    
    # Verificar se o token est√° definido
    if [ -z "$EASYPANEL_TOKEN" ] || [ "$EASYPANEL_TOKEN" = "seu_token_aqui" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  EASYPANEL_TOKEN n√£o configurado. Pulando deploy autom√°tico.${NC}"
        echo -e "${YELLOW}üí° Para habilitar deploy autom√°tico, configure o token no arquivo build-and-push.sh${NC}"
    else
        # Fazer deploy via API do EasyPanel
        echo -e "${YELLOW}üì° Fazendo deploy da vers√£o $VERSION no EasyPanel...${NC}"
        
        # Comando curl para trigger do deploy (ajuste conforme a API do EasyPanel)
        DEPLOY_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $EASYPANEL_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
                \"image\": \"$DOCKER_USERNAME/$IMAGE_NAME:$VERSION\",
                \"project\": \"$EASYPANEL_PROJECT\"
            }" \
            "$EASYPANEL_URL/api/deploy" 2>/dev/null)
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Deploy iniciado com sucesso no EasyPanel!${NC}"
            echo -e "${GREEN}üåê URL: $EASYPANEL_URL${NC}"
            echo -e "${GREEN}üì¶ Vers√£o deployada: $VERSION${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  N√£o foi poss√≠vel fazer deploy autom√°tico no EasyPanel${NC}"
            echo -e "${YELLOW}üí° Fa√ßa o deploy manual em: $EASYPANEL_URL${NC}"
        fi
    fi
else
    echo -e "${RED}‚ùå Erro ao enviar tag latest${NC}"
    exit 1
fi

# Fazer push das mudan√ßas para o reposit√≥rio
echo -e "${YELLOW}üì§ Fazendo push das mudan√ßas para o reposit√≥rio...${NC}"
git push

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Push realizado com sucesso${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Erro no push ou nenhuma mudan√ßa para enviar${NC}"
fi

# Fazer push das tags
echo -e "${YELLOW}üì§ Fazendo push das tags...${NC}"
git push --tags

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Tags enviadas com sucesso${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Erro ao enviar tags${NC}"
fi

echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo -e "${GREEN}‚ú® Deploy conclu√≠do com sucesso!${NC}"
echo -e "${GREEN}üì¶ Vers√£o: $VERSION${NC}"
echo -e "${GREEN}üê≥ Docker Hub: $DOCKER_USERNAME/$IMAGE_NAME:$VERSION${NC}"
echo -e "${GREEN}üè∑Ô∏è  Git Tag: v$VERSION${NC}"
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"